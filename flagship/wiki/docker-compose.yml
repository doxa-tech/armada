# stack name : fs_wiki
version: '3'

services:
  docmost:
    # docmost runs on port 3000
    image: docmost/docmost:latest
    depends_on:
      - db
      - redis
    environment:
      APP_URL: 'http://localhost:3000'
      APP_SECRET: ${APP_SECRET}
      DATABASE_URL: 'postgresql://docmost:${DB_PASSWORD}@db:5432/docmost?schema=public'
      REDIS_URL: 'redis://redis:6379'
    networks:
      - public
      - internal
    restart: unless-stopped
    volumes:
      - docmostDataVol1:/app/data/storage
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [ node.role == manager ]
      labels:
        - traefik.http.routers.fs_wiki_docmost.rule=Host(`wiki.doxatech.ch`)
        - traefik.http.routers.fs_wiki_docmost.entrypoints=websecure
        - traefik.http.routers.fs_wiki_docmost.tls.certresolver=leresolver
        - traefik.http.services.fs_wiki_docmost.loadbalancer.server.port=3000

  db:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: docmost
      POSTGRES_USER: docmost
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    restart: unless-stopped
    networks:
      - internal
    volumes:
      - docmostPostgresDataVol1:/var/lib/postgresql/data
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [ node.role == manager ]
      labels:
        - traefik.enable=false

  redis:
    image: redis:7.2-alpine
    restart: unless-stopped
    networks:
      - internal
    volumes:
      - docmostRedisDataVol1:/data
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [ node.role == manager ]
      labels:
        - traefik.enable=false

volumes:
  docmostDataVol1:
  docmostPostgresDataVol1:
  docmostRedisDataVol1:

networks:
  public:
    external: true
  internal:
